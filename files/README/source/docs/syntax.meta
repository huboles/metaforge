${
    title = 'syntax'
    description = 'basic syntax rules'
}

## sigils
- $ variables
- @ arrays
- & patterns
- \# settings
- \- comments

## definition block
a sigil followed by assignment operations enclosed by brackets

### examples
    ${var} foo = 'bar' }

    ${pat}
        foo.bar = "baz"
        bar.baz = 'foo'
    }

## strings
double or single quoted strings, double quoted strings require escaping
control characters, and single quoted strings get copied as is.
single quoted strings can stretch across newlines.

### examples
    "foo bar baz\n"

    'foo
    bar
    baz'

## arrays
a list of strings, separated by commas, enclosed by brackets.
whitespace and newlines between list values are accepted

### examples
    [ 'foo', 'bar', 'baz', 'quux' ]

    ["foo","bar","baz"]

    [
        'foo',
        'bar',
        'baz'
    ]

## comments
a comment sigil \- followed by a comment in braces
the only characters not allowed are braces.

comments get removed during the first pass through of parsing, and can occur
anywhere in or across a line.

### examples
    ${com} foobar }

    ${com}
        foobar
        foobaz
    }

## layout
- optional header definition block
- optional variable, array, pattern definition blocks
- source

### example
    ${head} foo = 'bar' } ${com} settings for parsing file }

    ${var}
        foo = 'foobar'
        bar.foo = 'foobaz'
    }

    ${arr}
        foo = ['foobar','foobaz']
        foo.bar.baz = [ 'foobar', 'foobaz', 'barbaz' ]
    }

    ${pat}
        foo.bar = 'foobar'
        bar = "foo_bar"
    }

    # FOOBAR
    Foo bar baz quux lorem ipsum...
